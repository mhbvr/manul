// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.32.0
// source: cat_photos.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CatPhotosServiceClient is the client API for CatPhotosService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatPhotosServiceClient interface {
	ListCats(ctx context.Context, in *ListCatsRequest, opts ...grpc.CallOption) (*ListCatsResponse, error)
	ListPhotos(ctx context.Context, in *ListPhotosRequest, opts ...grpc.CallOption) (*ListPhotosResponse, error)
	GetPhoto(ctx context.Context, in *GetPhotoRequest, opts ...grpc.CallOption) (*GetPhotoResponse, error)
	GetPhotosStream(ctx context.Context, in *GetPhotosStreamRequest, opts ...grpc.CallOption) (CatPhotosService_GetPhotosStreamClient, error)
}

type catPhotosServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCatPhotosServiceClient(cc grpc.ClientConnInterface) CatPhotosServiceClient {
	return &catPhotosServiceClient{cc}
}

func (c *catPhotosServiceClient) ListCats(ctx context.Context, in *ListCatsRequest, opts ...grpc.CallOption) (*ListCatsResponse, error) {
	out := new(ListCatsResponse)
	err := c.cc.Invoke(ctx, "/catphotos.CatPhotosService/ListCats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catPhotosServiceClient) ListPhotos(ctx context.Context, in *ListPhotosRequest, opts ...grpc.CallOption) (*ListPhotosResponse, error) {
	out := new(ListPhotosResponse)
	err := c.cc.Invoke(ctx, "/catphotos.CatPhotosService/ListPhotos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catPhotosServiceClient) GetPhoto(ctx context.Context, in *GetPhotoRequest, opts ...grpc.CallOption) (*GetPhotoResponse, error) {
	out := new(GetPhotoResponse)
	err := c.cc.Invoke(ctx, "/catphotos.CatPhotosService/GetPhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catPhotosServiceClient) GetPhotosStream(ctx context.Context, in *GetPhotosStreamRequest, opts ...grpc.CallOption) (CatPhotosService_GetPhotosStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &CatPhotosService_ServiceDesc.Streams[0], "/catphotos.CatPhotosService/GetPhotosStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &catPhotosServiceGetPhotosStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CatPhotosService_GetPhotosStreamClient interface {
	Recv() (*GetPhotosStreamResponse, error)
	grpc.ClientStream
}

type catPhotosServiceGetPhotosStreamClient struct {
	grpc.ClientStream
}

func (x *catPhotosServiceGetPhotosStreamClient) Recv() (*GetPhotosStreamResponse, error) {
	m := new(GetPhotosStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CatPhotosServiceServer is the server API for CatPhotosService service.
// All implementations must embed UnimplementedCatPhotosServiceServer
// for forward compatibility
type CatPhotosServiceServer interface {
	ListCats(context.Context, *ListCatsRequest) (*ListCatsResponse, error)
	ListPhotos(context.Context, *ListPhotosRequest) (*ListPhotosResponse, error)
	GetPhoto(context.Context, *GetPhotoRequest) (*GetPhotoResponse, error)
	GetPhotosStream(*GetPhotosStreamRequest, CatPhotosService_GetPhotosStreamServer) error
	mustEmbedUnimplementedCatPhotosServiceServer()
}

// UnimplementedCatPhotosServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCatPhotosServiceServer struct {
}

func (UnimplementedCatPhotosServiceServer) ListCats(context.Context, *ListCatsRequest) (*ListCatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCats not implemented")
}
func (UnimplementedCatPhotosServiceServer) ListPhotos(context.Context, *ListPhotosRequest) (*ListPhotosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPhotos not implemented")
}
func (UnimplementedCatPhotosServiceServer) GetPhoto(context.Context, *GetPhotoRequest) (*GetPhotoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPhoto not implemented")
}
func (UnimplementedCatPhotosServiceServer) GetPhotosStream(*GetPhotosStreamRequest, CatPhotosService_GetPhotosStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPhotosStream not implemented")
}
func (UnimplementedCatPhotosServiceServer) mustEmbedUnimplementedCatPhotosServiceServer() {}

// UnsafeCatPhotosServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatPhotosServiceServer will
// result in compilation errors.
type UnsafeCatPhotosServiceServer interface {
	mustEmbedUnimplementedCatPhotosServiceServer()
}

func RegisterCatPhotosServiceServer(s grpc.ServiceRegistrar, srv CatPhotosServiceServer) {
	s.RegisterService(&CatPhotosService_ServiceDesc, srv)
}

func _CatPhotosService_ListCats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatPhotosServiceServer).ListCats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catphotos.CatPhotosService/ListCats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatPhotosServiceServer).ListCats(ctx, req.(*ListCatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatPhotosService_ListPhotos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPhotosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatPhotosServiceServer).ListPhotos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catphotos.CatPhotosService/ListPhotos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatPhotosServiceServer).ListPhotos(ctx, req.(*ListPhotosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatPhotosService_GetPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatPhotosServiceServer).GetPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catphotos.CatPhotosService/GetPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatPhotosServiceServer).GetPhoto(ctx, req.(*GetPhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatPhotosService_GetPhotosStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPhotosStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CatPhotosServiceServer).GetPhotosStream(m, &catPhotosServiceGetPhotosStreamServer{stream})
}

type CatPhotosService_GetPhotosStreamServer interface {
	Send(*GetPhotosStreamResponse) error
	grpc.ServerStream
}

type catPhotosServiceGetPhotosStreamServer struct {
	grpc.ServerStream
}

func (x *catPhotosServiceGetPhotosStreamServer) Send(m *GetPhotosStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// CatPhotosService_ServiceDesc is the grpc.ServiceDesc for CatPhotosService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CatPhotosService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "catphotos.CatPhotosService",
	HandlerType: (*CatPhotosServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCats",
			Handler:    _CatPhotosService_ListCats_Handler,
		},
		{
			MethodName: "ListPhotos",
			Handler:    _CatPhotosService_ListPhotos_Handler,
		},
		{
			MethodName: "GetPhoto",
			Handler:    _CatPhotosService_GetPhoto_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPhotosStream",
			Handler:       _CatPhotosService_GetPhotosStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cat_photos.proto",
}
